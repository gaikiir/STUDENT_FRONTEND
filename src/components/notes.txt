<div className="flex flex-col items-center justify-center space-y-6 shrink-1 sm:flex sm:flex-row sm:space-y-0 sm:space-x-6">
</div>

 <div className="hero bg-slate-800 text-white h-screen">
                <h1 className="text-2xl font-semibold tracking-tight uppercase text-gray-900 dark:text-white mb-8 ">
                    Welcome welcome back Admin
                </h1>
                <div className="max-w-7xl mx-auto grid  grid-rows-2 gap-3 sm:grid-cols-1 px-2 md:grid-cols-2 lg:grid-cols-2">

                    <div className="">
                        <div className="mx-auto mb-2 flex items-center justify-center p-2 dark:bg-gray-600">
                            <Avatar rounded size="md" stacked />
                        </div>
                        <div className="text-center font-medium text-gray-500 dark:text-gray-400">Student Details</div>
                        <StudentDetails />
                    </div>

                    <div className="">
                        <div className="mx-auto mb-2 flex h-[48px] max-h-[48px] w-[48px] max-w-[48px] items-center justify-center rounded-full bg-gray-200 p-2 dark:bg-gray-600">
                            <svg
                                className="inline h-5 w-5 text-gray-500 dark:text-gray-400"
                                aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="currentColor"
                                viewBox="0 0 20 18"
                            >
                                <path d="M14 2a3.963 3.963 0 0 0-1.4.267 6.439 6.439 0 0 1-1.331 6.638A4 4 0 1 0 14 2Zm1 9h-1.264A6.957 6.957 0 0 1 15 15v2a2.97 2.97 0 0 1-.184 1H19a1 1 0 0 0 1-1v-1a5.006 5.006 0 0 0-5-5ZM6.5 9a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 10H5a5.006 5.006 0 0 0-5 5v2a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-2a5.006 5.006 0 0 0-5-5Z" />
                            </svg>
                        </div>
                        <div className="text-center font-medium text-gray-500 dark:text-gray-400">Users </div>
                        <Performtask />
                    </div>

                </div>
            </div>

linear-gradient(to right bottom, rgba(0,0,0,.6),rgba(0,0,0,.6)) , 


 <Table striped>
                                    <TableHead>
                                        <TableRow >
                                            <TableHeadCell>First name</TableHeadCell>
                                            <TableHeadCell>Last Name</TableHeadCell>
                                            <TableHeadCell>Gender</TableHeadCell>
                                            <TableHeadCell>Update</TableHeadCell>
                                            <TableHeadCell>Delete Student</TableHeadCell>
                                        </TableRow>
                                    </TableHead>
                                    <TableBody>
                                        {/* {users.map((user) => ( */}
                                        <TableRow >
                                           {records.map((r,i)=>(
                                               <div key={i}>
                                                <TableCell>{r.FirstName}</TableCell>
                                                <TableCell>{r.LastName}</TableCell>
                                                <TableCell>{r.Gender}</TableCell>
                                                <TableCell>
                                                    <Link to="/studentupdate" onClick={(e)=>{e.preventDefault(); LoadUpdate(r._id)}}>
                                                           Edit
                                                    </Link>
                                                   
                                                </TableCell>
                                                   <TableCell>
                                                       <Link to="/studentupdate" onClick={(e) => { e.preventDefault(); LoadUpdate(r._id) }}>
                                                           Delete
                                                       </Link>

                                                   </TableCell>
                                            </div>
                                           ))}
                                        </TableRow>
                                       
                                    </TableBody>
                                   
                                </Table>


                                 <div className="form-hero">
     <h5 className="mb-5 text-center text-2xl font-bold uppercase">update student</h5>
     <form className="flex max-w-md flex-col gap-4" onSubmit={handleSubmitUpdate}>
      <div>
        <div className="mb-2 block">
          <Label htmlFor="email1">First Name</Label>
        </div>
        <TextInput id="email1" onChange={handleUpdate} name="FirstName" type="text" placeholder="John" required />
      </div>
      <div>
        <div className="mb-2 block">
          <Label htmlFor="password1">Last Name</Label>
        </div>
        <TextInput id="password1" onChange={handleUpdate} name="LastName" placeholder="Doe" type="text" required />
      </div>
     <div className="mb-2 block">
        <Label htmlFor="countries">Select your Gender</Label>
      </div>
      <Select id="countries" onChange={handleUpdate} name="Gender" required>
        <option>----Genders----</option>
        <option>Male</option>
        <option>Female</option>
        
      </Select>
      <Button type="submit">Update</Button>
    </form>
   <ToastContainer/>
   </div>
const {id} = useParams();
  console.log('Received url id', id)

  const [data, setData] = useState({
    FirstName: '',
    LastName: '',
    Gender: '',
  });

  useEffect(() => {
    const token = sessionStorage.getItem('accessToken');
  
    axios.get(`http://localhost:4000/limit/routes/getStudentById/${id}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    })
    .then((res) => {
      setData({
        _id: res.data.id,
        FirstName: res.data.FirstName,
        LastName: res.data.LastName,
        Gender: res.data.Gender
      });
    })
    .catch((err) => console.error(err))
    .finally(() => {});
  }, [id]);

  const handleUpdate = (ev) => {
    const { name, value } = ev.target;
    setData((prev) => ({...prev,[name]: value}));
  };

  const handleSubmitUpdate = (ev) => {
    ev.preventDefault();
    const token = sessionStorage.getItem('accessToken');

    // Validate student_id
    if (!id) {
      toast.error('Invalid student ID', {
        position: toast.POSITION.TOP_RIGHT,
        autoClose: 2000
      });
      return;
    }

    // Check if data fields are populated
    if (!data.FirstName || !data.LastName || !data.Gender) {
      toast.error('All fields are required', {
        position: toast.POSITION.TOP_RIGHT,
        autoClose: 2000
      });
      return;
    }

    axios.put(`http://localhost:4000/limit/routes/updateStudent/${id}`, data, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    })
    .then(() => {
      toast.success('Student updated successfully', {
        position: toast.POSITION.TOP_RIGHT,
        autoClose: 2000
      });
    })
    .catch((err) => {
      toast.error('An Error Occurrend while updating student', {
        position: toast.POSITION.TOP_RIGHT,
        autoClose: 2000
      });
    });
  };



"use client";

import { Footer } from "flowbite-react";
import { Link } from "react-router-dom/cjs/react-router-dom";

export default function Component() {
    return (
        <Footer container className="fixed bottom-0 bg-slate-800 text-white pt-12">
           
            <div className="w-full text-center">
                <div className="w-full justify-between sm:flex sm:items-center sm:justify-between">
                    <Footer.Brand
                        href="https://flowbite.com"
                        src="https://flowbite.com/docs/images/logo.svg"
                        alt="Flowbite Logo"
                        name="Flowbite"
                    />
                    <Footer.LinkGroup>
                        <Footer.Link href="#">About</Footer.Link>
                        <Footer.Link href="#">Privacy Policy</Footer.Link>
                        <Footer.Link href="#">Licensing</Footer.Link>
                        <Footer.Link href="#">Contact</Footer.Link>
                    </Footer.LinkGroup>
                </div>
                <Footer.Divider />
                <Footer.Copyright href="/" by="By CHRIS" year={'Alright copy reserve: '+2025} />
            </div>
        </Footer>
    );
}
"use client";
import { Card, Avatar, Button } from "flowbite-react";
import { Link, useHistory, useParams } from "react-router-dom/cjs/react-router-dom";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeadCell,
  TableRow,
} from "flowbite-react";
import { useEffect, useState } from "react";
import axios from "axios";
export default function Component() {
  const [records, setRecords] = useState([]);
  const navigate = useHistory();
  
  const [unauthorized, setUnthorized] = useState(false);
  const LoadUpdate = (user_id) => {
    navigate.push(`/update/${user_id}`);
  };
  const loadDel =(user_id)=>{
    navigate.push(`/deletestudent/${user_id}`)
  }

  useEffect(() => {
    const toke = sessionStorage.getItem("accessToken");
    axios
      .get(`http://localhost:4000/limit/routes/Allstudents`, {
        headers: {
          Authorization: `Bearer ${toke}`,
          "Content-Type": "application/json",
        },
      })
      .then((resolve) => {
        setRecords(resolve.data);
      })
      .catch((error) => {
        if (error.response.status === 403) {
          setUnthorized(true);
        }
      })
      .finally(() => {});
  }, []);

  return (
    <div className="bg-slate-700 max-h-screen py-3">
      <div className="max-w-7xl mx-auto admin-content">
        <h1 className="text-left text-white text-2xl uppercase mb-3">
          dashboard
        </h1>
        <div className="grid grid-cols-1 gap-x-4  lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-y-3 bg-slate-400 p-3 rounded">
          <Card className="max-h-screen card">
            <div>
              <img
                className="max-w-12 block float-left"
                src="/images/user.png"
                alt="user"
              />
              <h5 className="text-sm font-bold mb-2 text-gray-900 dark:text-white">
                Total Users
              </h5>
              <p className="text-sm text-gray-600 dark:text-gray-400 text-2xl">
                {+4}
              </p>
            </div>
          </Card>
          <Card>
            <div className="font-bold text-center">
              <Link to="/viewassignment">
                <img
                className="max-w-12 text-center float-left"
                src="/images/docs.png"
                alt="documents"
              />
                <h5 className="text-sm font-bold mb-2 text-cyan-600 hover:underline dark:text-cyan-500 cursor mt-3">
                View Assignment
              </h5>
              </Link>
                        
            </div>
          </Card>
          <Card>
            <div>
              <Link to="/addStudent" className="flex items-center ">
                <img
                  className="max-w-12 float-left "
                  src="/images/add-friend.png"
                  alt="add-friend"
                />
                <button className="block ml-5 bg-slate-500 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded mr-3 mt-2">
                  Add Student
                </button>
              </Link>
            </div>
          </Card>
        </div>

        <div className=" grid grid-cols-1 gap-x-4 md:grid-cols-2 lg:grid-2 sm:grid-cols-1 gap-y-3 mt-5">
          <Card className="max-h-screen card p-y-3">
            <div className="flex flex-col items-center text-start">
              {/* Profile Picture */}
              <div className="relative mb-4">
                <img
                  src="/images/user.png"
                  alt="Profile"
                  className="w-24 h-24 rounded-full object-cover border-4 border-blue-100"
                />
                <span className=" absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-1"></span>
              </div>

              {/* User Info */}
              <div className="w-full space-y-4">
                {/* Name */}
                <div className="flex items-center">
                  {/* <span className="material-icons text-gray-500 mr-2">person</span> */}
                  <div>
                    <p className="text-sm text-gray-500">Name</p>
                    {/* <p className="font-medium">{user.displayName || 'John Doe'}</p> */}
                  </div>
                </div>

                {/* Email */}
                <div className="flex items-center">
                  {/* <span className="material-icons text-gray-500 mr-2">email</span> */}
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    {/* <p className="font-medium">{user.email || 'user@example.com'}</p> */}
                  </div>
                </div>

                {/* Gender */}
                <div className="flex items-center">
                  <span className="material-icons text-gray-500">
                    {/* {user.gender === 'female' ? 'female' : 'male'} */}
                  </span>
                  <div>
                    <p className="text-sm text-gray-500">Gender</p>
                    <p className="font-medium">
                      {/* {user.gender ?
                                                    user.gender.charAt(0).toUpperCase() + user.gender.slice(1)
                                                    : 'Not specified'} */}
                    </p>
                  </div>
                </div>
                <div className="flex items-center">
                  <Link to="/createEvent">
                    <Button className="bg-blue-500 hover:bg-blue-700 uppercase text-white font-bold px-2 mt-4">
                      {" "}
                      create an event
                    </Button>
                  </Link>
                </div>
              </div>
            </div>
          </Card>
          <Card className="max-h-screen card overflow-y-scroll max-h-96 relative">
            <div className="overflow-x-hidden absolute top-0 left-0 right-0 w-full ">
                 <h5 className="text-sm font-bold mb-2 text-gray-900 dark:text-white pt-3 uppercase">
                Student Details
              </h5>
              <Table striped>
                <TableHead>
                  <TableHeadCell>FirstName</TableHeadCell>
                  <TableHeadCell>LastName</TableHeadCell>
                  <TableHeadCell>Gender</TableHeadCell>
                  <TableHeadCell>Update</TableHeadCell>
                  <TableHeadCell>Delete</TableHeadCell>
                </TableHead>
                <TableBody className="divide-y">
                  {records.map((d, i) => (
                    <TableRow
                      className="bg-white dark:border-gray-700 dark:bg-gray-800"
                      key={i}
                    >
                      <TableCell>{d.FirstName}</TableCell>
                      <TableCell>{d.LastName}</TableCell>
                      <TableCell>{d.Gender}</TableCell>
                      <TableCell>
                        <Link
                          to="/update"className="font-medium text-cyan-600 hover:underline dark:text-cyan-500"
                        onClick={(ev)=>{ev.preventDefault(); LoadUpdate(d.id)}}>
                          Edit
                        </Link>
                      </TableCell>
                       <TableCell>
                        <a
                          href="/deletestudent"
                          className="font-medium text-cyan-600 hover:underline dark:text-cyan-500"
                        onClick={(ev)=>{ev.preventDefault(); loadDel(d.id)}}>
                          Delete
                        </a>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
}


<h4 className="text-white text-left uppercase font-bold">
              Student list
            </h4>